#是否打印log4j框架内的日志, 默认值为false
#log4j.debug=true

# 配置根logger, 格式: log4j.rootLogger=[level],appenderName1,appenderName2,…
log4j.rootLogger=warn,console,errorDailyFile

# 配置自定义的logger, 格式: log4j.logger.[包路径]=[level],appenderName1,appenderName2,…
log4j.logger.com.chenlongji=info,console,infoRollingFile
# 打印时是否添加父类logger, 默认值为true. 格式: log4j.additivity.[自定义logger的包路径]=[boolean值]
log4j.additivity.com.chenlongji=false

#################
# 输出到控制台
#################
#console 控制台输出源
log4j.appender.console=org.apache.log4j.ConsoleAppender
# 输出日志的格式(布局)实现类
log4j.appender.console.layout=org.apache.log4j.PatternLayout
# 输出日志的具体格式
log4j.appender.console.layout.conversionPattern=%d [%t] %10p [%c\:%L] tid=%X{traceId} %m%n
# 输出日志的级别 不填则认为是ALL级别
log4j.appender.console.threshold=info

#################
# 输出到文件(RollingFileAppender类型)
#################
# 滚动文件输出源, 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.infoRollingFile=org.apache.log4j.RollingFileAppender
# 输出文件的路径 例如:./src/logs/clj2023.log
log4j.appender.infoRollingFile.file=D://logs/info.log
# 文件最大容量(到达后创建新的文件), 默认值为10MB. 这里后缀可以为KB,MB,GB
log4j.appender.infoRollingFile.maxFileSize=1KB
# 输出日志的格式(布局)实现类. 注: layout必须是小写
log4j.appender.infoRollingFile.layout=org.apache.log4j.PatternLayout
# 输出日志的具体格式
log4j.appender.infoRollingFile.layout.conversionPattern=%d [%t] %-5p [%c\:%L] %m%n
# 输出日志的级别 不填则理解为ALL级别
log4j.appender.infoRollingFile.threshold=info

#################
# 输出到文件(DailyRollingFileAppender类型)
#################
# 按天滚动生成日志文件输出源
log4j.appender.errorDailyFile=org.apache.log4j.DailyRollingFileAppender
# 输出文件的路径 例如:./src/logs/error.log
log4j.appender.errorDailyFile.file=D://logs/error.log
# 输出日志的格式(布局)实现类
log4j.appender.errorDailyFile.layout=org.apache.log4j.PatternLayout
# 输出日志的具体格式
log4j.appender.errorDailyFile.layout.conversionPattern=%d [%t] %-5p [%c\:%L] %m%n
# 文件日期格式, 也是分隔粒度. 最小分隔为分钟, 设置小于分钟也是按分钟滚动生成文件
log4j.appender.errorDailyFile.datePattern='.'yyyy-MM-dd'.log'
# 输出日志的级别 不填则理解为ALL级别
log4j.appender.errorDailyFile.threshold=warn