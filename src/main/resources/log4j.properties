#打印log4j框架内的日志, 默认值为false
#log4j.debug=true

# 配置根Logger, 格式: [level],appenderName1,appenderName2,…
log4j.rootLogger=error,console,rollingFile
# 全局日志级别, 默认值为all, 设置后低于该级别的日志都不能输出
#log4j.threshold=all

#################
# 输出到控制台
#################
#console 控制台输出源. log4j.appender.[appenderName]中的appenderName必须和log4j.rootLogger中的appenderName大小写相同
log4j.appender.console=org.apache.log4j.ConsoleAppender
# 输出方式, 默认值为System.out
#log4j.appender.Console.Target=System.out
# 输出日志的格式(布局)实现类
log4j.appender.console.layout=org.apache.log4j.PatternLayout
# 输出日志的具体格式
log4j.appender.console.layout.conversionPattern=%d [%t] %-5p [%c\:%L] - tid=%X{traceId}, %m%n
# 输出日志的级别 不填则理解为ALL级别
#log4j.appender.Console.Threshold=ERROR

#################
# 输出到文件(RollingFileAppender类型)
#################
# 滚动文件输出源, 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender
# 输出文件的编码格式, 不填则使用系统默认的编码
log4j.appender.rollingFile.encoding=UTF-8
# 输出文件的路径 例如:./src/logs/clj2023.log
log4j.appender.rollingFile.file=D://logs/myLog.log
# 文件最大容量(到达后创建新的文件), 默认值为10MB. 这里后缀可以为KB,MB,GB
log4j.appender.rollingFile.maxFileSize=500MB
# 滚动文件的最大数, 例如MaxBackupIndex=2, 可以生成myLog1.log, myLog2.log, myLog1.log三个文件
log4j.appender.rollingFile.maxBackupIndex=2
# 输出日志的格式(布局)实现类. 注: layout必须是小写
log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout
# 输出日志的具体格式
log4j.appender.rollingFile.layout.conversionPattern=%d [%t] %-5p [%c\:%L] - tid=%X{traceId}, %m%n
# 是否开启缓冲区, 默认值false. 该值与immediateFlush互斥, 开启时immediateFlush会置为false
#log4j.appender.rollingFile.bufferedIO=true
# 缓冲区大小, 默认值8KB
#log4j.appender.rollingFile.bufferSize=1024
# 是否立即写文件, 默认值true
#log4j.appender.rollingFile.immediateFlush=true
# 文件添加. true-消息增加到指定文件中, false-将消息覆盖指定的文件内容, 默认值是true
#log4j.appender.rollingFile.append=true
# 输出日志的级别 不填则理解为ALL级别
log4j.appender.rollingFile.threshold=info

#################
# 输出到文件(DailyRollingFileAppender类型)
#################
# 按天滚动生成日志文件输出源
log4j.appender.errorDailyFile=org.apache.log4j.DailyRollingFileAppender
# 输出文件的路径 例如:./src/logs/error.log
log4j.appender.errorDailyFile.file=D://logs/error.log
log4j.appender.errorDailyFile.layout=org.apache.log4j.PatternLayout
log4j.appender.errorDailyFile.layout.conversionPattern=%d [%t] %-5p [%c\:%L] - tid=%X{traceId}, %m%n
# 最小分隔为分钟, 设置小于分钟也是按分钟滚动生成文件
log4j.appender.errorDailyFile.datePattern='.'yyyy-MM-dd-HH-mm'.log'
log4j.appender.errorDailyFile.threshold=error

#################
# 输出到文件(自定义的DailyRollingFileAppender类型)
#################
# 按天滚动生成日志文件输出源
log4j.appender.myDailyFile=com.chenlongji.log4jstudy.test.MyDailyRollingFileAppender
# 输出文件的路径 例如:./src/logs/error.log
log4j.appender.myDailyFile.file=D://logs/myError.log
log4j.appender.myDailyFile.layout=org.apache.log4j.PatternLayout
log4j.appender.myDailyFile.layout.conversionPattern=%d [%t] %-5p [%c\:%L] - tid=%X{traceId}, %m%n
# 最小分隔为分钟, 设置小于分钟也是按分钟滚动生成文件
log4j.appender.myDailyFile.datePattern='.'yyyy-MM-dd-HH-mm'.log'
log4j.appender.myDailyFile.threshold=error
# 最大备份文件数(不包含根文件file)
log4j.appender.myDailyFile.maxBackupIndex=5

# 配置自定义的非根logger
log4j.logger.com.chenlongji=info,console,myDailyFile
# 打印时是否添加父类logger
log4j.additivity.com.chenlongji=false
